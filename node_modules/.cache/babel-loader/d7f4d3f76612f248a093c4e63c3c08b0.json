{"ast":null,"code":"var _jsxFileName = \"/home/luan/Documentos/githubproject/src/Components/Charts/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport buildChart from '../../utils/buildChart';\nimport langColors from '../../utils/langColors';\nimport ChartsStyles from './styles';\nimport theme from '../../styles/theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  colors,\n  fonts\n} = theme;\nconst colorGreen = [colors.green100, colors.green200, colors.green300, colors.green400, colors.green500, colors.green600, colors.green700];\n\nconst Charts = ({\n  langData,\n  repoData\n}) => {\n  _s();\n\n  console.log('repoData:', repoData);\n  console.log('langData:', langData); //   Gr치fico dos Linguagens Utilizadas  //\n\n  const [langChartData, setLangChartData] = useState(null);\n\n  const initLangChart = () => {\n    const ctx = document.getElementById(\"langChart\");\n    const labels = langData.map(lang => lang.label);\n    const data = langData.map(lang => lang.value);\n    setLangChartData(data);\n\n    if (data.length > 1) {\n      const backgroundColor1 = langData.map(({\n        color\n      }) => `#${color.length > 4 ? color.slice(1) : color.slice(1)}`);\n      const backgroundColor = colorGreen;\n      const borderColor = colorGreen;\n      const chartType = 'pie';\n      const axes = false;\n      const legend = true;\n      const config = {\n        ctx,\n        chartType,\n        labels,\n        data,\n        backgroundColor,\n        borderColor,\n        axes,\n        legend\n      };\n      buildChart(config);\n    }\n  }; //   Gr치fico dos Reposit칩rios mais curtidos  //\n\n\n  const [starChartData, setStarChartData] = useState(null);\n\n  const initmostStarred = () => {\n    const ctx = document.getElementById(\"starChart\");\n    const LIMIT = 5;\n    const sortProperty = 'stargazers_count';\n    const mostStarredRepos = repoData.filter(repo => !repo.fork).sort((a, b) => b[sortProperty] - a[sortProperty]).slice(0, LIMIT);\n    const labels = mostStarredRepos.map(repo => repo.name);\n    const data = mostStarredRepos.map(repo => repo[sortProperty]);\n    console.log(200, data);\n    setLangChartData(data);\n\n    if (data.length > 1) {\n      const backgroundColor = colorGreen;\n      const borderColor = colorGreen;\n      const chartType = 'bar';\n      const axes = true;\n      const legend = false;\n      const config = {\n        ctx,\n        chartType,\n        labels,\n        data,\n        backgroundColor,\n        borderColor,\n        axes,\n        legend\n      };\n      buildChart(config);\n    }\n  };\n\n  const [LangStarred, setLangStarred] = useState(null); //   Linguagens mais curtidas nos reposit칩rios  //\n\n  const initLangStarred = () => {\n    const ctx = document.getElementById(\"langStarChart\");\n    const LIMIT = 5;\n    const sortProperty = 'stargazers_count';\n    const filteredRepos = repoData.filter(repo => !repo.fork && repo.stargazers_count > 0);\n    console.log(5000, filteredRepos);\n    const uniqueLangs = new Set(filteredRepos.map(repo => repo.language));\n    const labels = Array.from(uniqueLangs.values()).filter(l => l);\n    console.log('label', labels);\n    const data = labels.map(lang => {\n      const repos = filteredRepos.filter(repo => repo.language === lang);\n      const starsArr = repos.map(r => r.stargazers_count);\n      const starSum = starsArr.reduce((a, b) => a + b, 0);\n      return starSum;\n    });\n    console.log('data', data);\n    setLangStarred(data);\n\n    if (data.length > 1) {\n      console.log('passouaqui');\n      const chartType = 'doughnut';\n      const axes = false;\n      const legend = true;\n      const borderColor = labels.map(label => langColors.label);\n      const backgroundColor = colorGreen;\n      const config = {\n        ctx,\n        chartType,\n        labels,\n        data,\n        backgroundColor,\n        borderColor,\n        axes,\n        legend\n      };\n      console.log('config', config);\n      buildChart(config);\n    }\n  };\n\n  useEffect(() => {\n    if (langData && repoData) {\n      initLangChart();\n      initmostStarred();\n      initLangStarred();\n    }\n  }, []);\n  const chartSize = 300;\n  const langChartError = !(langChartData && langChartData.length > 0);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: langData != null && repoData && /*#__PURE__*/_jsxDEV(ChartsStyles, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GraphsContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart\",\n          children: [/*#__PURE__*/_jsxDEV(\"header\", {\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Top Languages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-container\",\n            children: [langChartError && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Nothing to see here!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 40\n            }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n              id: \"langChart\",\n              width: chartSize,\n              height: chartSize\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart\",\n          children: [/*#__PURE__*/_jsxDEV(\"header\", {\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Repositories More Starred\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-container\",\n            children: [langChartError && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Nothing to see here!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 40\n            }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n              id: \"starChart\",\n              width: chartSize,\n              height: chartSize\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart\",\n          children: [/*#__PURE__*/_jsxDEV(\"header\", {\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Starred By Languages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-container\",\n            children: [langChartError && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Nothing to see here!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 40\n            }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n              id: \"langStarChart\",\n              width: chartSize,\n              height: chartSize\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Charts, \"UKfcJUSlxbNwhcKUC0YoRTDLuog=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["/home/luan/Documentos/githubproject/src/Components/Charts/index.tsx"],"names":["React","useState","useEffect","buildChart","langColors","ChartsStyles","theme","colors","fonts","colorGreen","green100","green200","green300","green400","green500","green600","green700","Charts","langData","repoData","console","log","langChartData","setLangChartData","initLangChart","ctx","document","getElementById","labels","map","lang","label","data","value","length","backgroundColor1","color","slice","backgroundColor","borderColor","chartType","axes","legend","config","starChartData","setStarChartData","initmostStarred","LIMIT","sortProperty","mostStarredRepos","filter","repo","fork","sort","a","b","name","LangStarred","setLangStarred","initLangStarred","filteredRepos","stargazers_count","uniqueLangs","Set","language","Array","from","values","l","repos","starsArr","r","starSum","reduce","chartSize","langChartError"],"mappings":"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","sourcesContent":["import React, {useRef,useState,useEffect} from 'react';\nimport buildChart from '../../utils/buildChart';\nimport langColors from '../../utils/langColors';\nimport ChartsStyles from './styles';\nimport  theme from '../../styles/theme';\nimport { isLabeledStatement } from 'typescript';\n                   \n\nconst { colors, fonts } = theme;\n\n\nconst colorGreen = [\n    colors.green100,\n    colors.green200,\n    colors.green300,\n    colors.green400,\n    colors.green500,\n    colors.green600,\n    colors.green700,\n    ]         \n\n\n\nconst Charts = ({langData,repoData}:any)=> {\n    console.log('repoData:',repoData);\n    console.log('langData:',langData)\n    \n\n    //   Gr치fico dos Linguagens Utilizadas  //\n\n    const [langChartData,setLangChartData] = useState(null);\n    \n    const initLangChart = () => {\n        const ctx = document.getElementById (\"langChart\");\n        const labels = langData.map((lang:any)=> lang.label);\n        const data = langData.map((lang:any) => lang.value);\n        \n        \n        setLangChartData(data);\n\n        if ( data.length>1) {\n            const backgroundColor1 = langData.map(({color}:any) => `#${ color.length > 4? color.slice(1):color.slice(1)}`,\n            )                 \n            const backgroundColor = colorGreen;                                 \n    \n            const borderColor = colorGreen;\n                \n            const chartType = 'pie';\n            const axes = false;\n            const legend = true;\n            const config = {ctx,chartType,labels,data,backgroundColor,borderColor,axes,legend};\n            \n            buildChart(config)\n            \n        }\n    }\n\n//   Gr치fico dos Reposit칩rios mais curtidos  //\n    const [starChartData,setStarChartData] = useState(null);\n\n\n                  \n    const initmostStarred = () => {\n        const ctx = document.getElementById (\"starChart\");\n        const LIMIT = 5;\n        const sortProperty = 'stargazers_count';\n        const mostStarredRepos = repoData.filter((repo: { fork: any; })=>!repo.fork).sort((a: { [x: string]: number; },b: { [x: string]: number; })=> b[sortProperty] - a[sortProperty]).slice(0,LIMIT);\n        const labels = mostStarredRepos.map((repo:any)=> repo.name);\n        const data = mostStarredRepos.map((repo:any) => repo[sortProperty]);        \n        console.log(200,data)                                                \n       \n        \n        setLangChartData(data);\n\n        if ( data.length>1) {\n            const backgroundColor = colorGreen\n            const borderColor = colorGreen\n            const chartType = 'bar';\n            const axes = true;\n            const legend = false;\n            const config = {ctx,chartType,labels,data,backgroundColor,borderColor,axes,legend};\n            buildChart(config);\n          \n            \n        }\n        \n    }\n\n    const [LangStarred,setLangStarred] = useState(null)\n\n                   //   Linguagens mais curtidas nos reposit칩rios  //\n\n\n    const initLangStarred = () => {\n        const ctx = document.getElementById (\"langStarChart\");\n        const LIMIT = 5;\n        const sortProperty = 'stargazers_count';\n        const filteredRepos = repoData.filter((repo: { fork: any; stargazers_count: number; }) => !repo.fork && repo.stargazers_count>0 )\n        console.log(5000,filteredRepos)\n        const uniqueLangs = new Set (filteredRepos.map((repo: { language: any; })=>repo.language))\n        \n        const labels = Array.from(uniqueLangs.values()).filter(l => l);\n        console.log('label',labels)\n        const data = labels.map(lang => {\n          const repos = filteredRepos.filter((repo: { language: unknown; }) => repo.language === lang);\n          const starsArr = repos.map((r: { stargazers_count: any; }) => r.stargazers_count);\n          const starSum = starsArr.reduce((a: any, b: any) => a + b, 0);\n          return starSum;  \n                                                  \n        });\n        console.log('data',data)\n        setLangStarred(data);\n\n        if ( data.length>1) {\n            console.log('passouaqui')\n\n            const chartType = 'doughnut';\n            const axes = false;\n            const legend = true;\n            const borderColor= (labels).map((label) => langColors.label);\n            const backgroundColor = colorGreen;\n            const config = { ctx, chartType, labels, data, backgroundColor, borderColor, axes, legend };\n            console.log('config',config)\n            buildChart(config);\n          \n            \n        }\n        \n    }\n\n    useEffect(() => {\n        \n        if (langData && repoData) {     \n          initLangChart();\n          initmostStarred();\n          initLangStarred();\n   \n       \n        }\n      }, []);\n    \n      \n    const chartSize = 300;\n    const langChartError = !(langChartData && langChartData.length > 0);\n \n    return (\n        \n        \n        <>\n            {langData!=null && repoData && (\n            <ChartsStyles>\n                <div className=\"GraphsContainer\">\n                <div className = \"chart\">\n                    <header>\n                        <h2>Top Languages</h2>\n                    </header>\n                    <div className=\"chart-container\">\n                    {langChartError && <p>Nothing to see here!</p>}\n                    <canvas  id=\"langChart\" width={chartSize} height={chartSize}/>            \n          </div>\n        </div>\n                \n\n        <div className = \"chart\">\n                    <header>\n                        <h2>Repositories More Starred</h2>\n                    </header>\n                    <div className=\"chart-container\">\n                    {langChartError && <p>Nothing to see here!</p>}\n                    <canvas  id=\"starChart\" width={chartSize} height={chartSize}/>            \n          </div>\n        </div>\n\n        <div className = \"chart\">\n                    <header>\n                        <h2>Starred By Languages</h2>\n                    </header>\n                    <div className=\"chart-container\">\n                    {langChartError && <p>Nothing to see here!</p>}\n                    <canvas  id=\"langStarChart\" width={chartSize} height={chartSize}/>            \n          </div>\n        </div>\n        </div>\n\n            </ChartsStyles>\n       \n        )\n        }\n         </>\n    )\n\n\n    }\nexport default Charts;"]},"metadata":{},"sourceType":"module"}