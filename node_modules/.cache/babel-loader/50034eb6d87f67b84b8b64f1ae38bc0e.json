{"ast":null,"code":"var _jsxFileName = \"/home/luan/Documentos/githubproject/src/Components/Repos/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ReposStyles, Section } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Repos = ({\n  repoData\n}) => {\n  _s();\n\n  const [topRepos, setTopRepos] = useState([]);\n  const [sortType, setSortType] = useState('stars');\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const map = {\n    'stars': 'stargazers_count',\n    'forks': 'forks_count',\n    'size': 'size'\n  };\n\n  const getTopRepos = typed => {\n    const LIMIT = 8;\n    const sortProperty = map[typed];\n    const sorted = repoData.filter(repo => !repo.fork).sort((a, b) => b[map[typed]] - a[map[typed]]).slice(0, LIMIT);\n    setTopRepos(sorted);\n  };\n\n  useEffect(() => {\n    if (repoData) {\n      getTopRepos(repoData);\n    }\n  }, []);\n\n  const toggleDropdown = () => setDropdownOpen(!dropdownOpen);\n\n  const changeRepoSort = sortType => {\n    setSortType(sortType);\n    toggleDropdown();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Section, {\n    children: /*#__PURE__*/_jsxDEV(ReposStyles, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Top Repos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"label\",\n          children: \"by\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"dropdown_button\",\n          onClick: () => toggleDropdown(),\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: sortType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"dropdown_list\",\n          children: Object.keys(map).map((type, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"dropdown_list-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onCLick: () => changeRepoSort(type),\n              children: type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 27\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 23\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Repos, \"hMoiE347XscnHKCcpdoeHWHe++M=\");\n\n_c = Repos;\nexport default Repos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Repos\");","map":{"version":3,"sources":["/home/luan/Documentos/githubproject/src/Components/Repos/index.tsx"],"names":["React","useState","useEffect","ReposStyles","Section","Repos","repoData","topRepos","setTopRepos","sortType","setSortType","dropdownOpen","setDropdownOpen","map","getTopRepos","typed","LIMIT","sortProperty","sorted","filter","repo","fork","sort","a","b","slice","toggleDropdown","changeRepoSort","Object","keys","type","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAAQC,WAAR,EAAqBC,OAArB,QAAmC,UAAnC;;;AAIA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAmB;AAAA;;AAC7B,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAyBP,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACQ,QAAD,EAAUC,WAAV,IAAyBT,QAAQ,CAAC,OAAD,CAAvC;AACA,QAAM,CAACU,YAAD,EAAcC,eAAd,IAAiCX,QAAQ,CAAC,KAAD,CAA/C;AAMA,QAAMY,GAAG,GAAG;AACR,aAAQ,kBADA;AAER,aAAS,aAFD;AAGR,YAAO;AAHC,GAAZ;;AASJ,QAAMC,WAAW,GAAIC,KAAD,IAAiB;AAIjC,UAAMC,KAAK,GAAG,CAAd;AAGA,UAAMC,YAAY,GAAGJ,GAAG,CAACE,KAAD,CAAxB;AACA,UAAMG,MAAM,GAAGZ,QAAQ,CAACa,MAAT,CAAiBC,IAAD,IAA0B,CAACA,IAAI,CAACC,IAAhD,EAAsDC,IAAtD,CAA2D,CAACC,CAAD,EAA6BC,CAA7B,KAA6DA,CAAC,CAACX,GAAG,CAACE,KAAD,CAAJ,CAAD,GAAgBQ,CAAC,CAACV,GAAG,CAACE,KAAD,CAAJ,CAAzI,EAAuJU,KAAvJ,CAA6J,CAA7J,EAA+JT,KAA/J,CAAf;AACER,IAAAA,WAAW,CAACU,MAAD,CAAX;AAEL,GAXD;;AAaAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,QAAJ,EAAc;AACZQ,MAAAA,WAAW,CAACR,QAAD,CAAX;AACD;AACF,GAJM,EAIJ,EAJI,CAAT;;AAMA,QAAMoB,cAAc,GAAG,MAAMd,eAAe,CAAC,CAACD,YAAF,CAA5C;;AAEA,QAAMgB,cAAc,GAAIlB,QAAD,IAAoB;AACvCC,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAiB,IAAAA,cAAc;AACjB,GAHD;;AAME,sBACI,QAAC,OAAD;AAAA,2BACI,QAAC,WAAD;AAAA,8BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAK,QAAA,SAAS,EAAG,kBAAjB;AAAA,gCACI;AAAM,UAAA,SAAS,EAAG,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,SAAS,EAAE,iBAAnB;AAAqC,UAAA,OAAO,EAAI,MAAIA,cAAc,EAAlE;AAAA,iCACI;AAAA,sBAAQjB;AAAR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAKI;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA,oBACKmB,MAAM,CAACC,IAAP,CAAYhB,GAAZ,EAAiBA,GAAjB,CAAqB,CAACiB,IAAD,EAAMC,CAAN,kBAClB;AAAI,YAAA,SAAS,EAAC,oBAAd;AAAA,mCACI;AAAQ,cAAA,OAAO,EAAI,MAAMJ,cAAc,CAACG,IAAD,CAAvC;AAAA,wBAAgDA;AAAhD;AAAA;AAAA;AAAA;AAAA;AADJ,aAAwCC,CAAxC;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA2BD,CAxED;;GAAM1B,K;;KAAAA,K;AA0EN,eAAeA,KAAf","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport {ReposStyles, Section} from './styles';\n\n\n\nconst Repos = ({repoData}:any)=> {\n    const [topRepos,setTopRepos] = useState([]);\n    const [sortType,setSortType] = useState('stars');\n    const [dropdownOpen,setDropdownOpen] = useState(false)\n\n\n\n  \n   \n    const map = {\n        'stars':'stargazers_count',\n        'forks' :'forks_count',\n        'size':'size',\n    };\n   \n\n\ntype typed= keyof typeof map\nconst getTopRepos = (typed:typed) => {\n   \n    \n    \n    const LIMIT = 8;\n   \n\n    const sortProperty = map[typed];\n    const sorted = repoData.filter((repo: { fork: any; }) => !repo.fork).sort((a: { [x: string]: number; },b: { [x: string]: number; }) => b[map[typed]] - a[map[typed]]).slice(0,LIMIT);\n      setTopRepos(sorted)\n      \n}\n\nuseEffect(() => {\n    if (repoData) {\n      getTopRepos(repoData);\n    }\n  }, []);\n\nconst toggleDropdown = () => setDropdownOpen(!dropdownOpen);\n\nconst changeRepoSort = (sortType:typed) => {\n    setSortType(sortType);\n    toggleDropdown();\n}\n\n\n  return (\n      <Section>\n          <ReposStyles>\n          <h2>Top Repos</h2>\n          <div className = \"dropdown-wrapper\">\n              <span className = \"label\">by</span>\n              <button className= \"dropdown_button\" onClick = {()=>toggleDropdown()}>\n                  <label>{sortType}</label>\n              </button>\n              <ul className=\"dropdown_list\">\n                  {Object.keys(map).map((type,i)=> (\n                      <li className=\"dropdown_list-item\" key={i}>\n                          <button onCLick = {() => changeRepoSort(type)}>{type}</button>\n                      </li>\n                  ))}\n              </ul>\n              \n          </div>\n          \n\n          </ReposStyles>\n      </Section>\n\n\n\n  )\n\n}\n\nexport default Repos;\n"]},"metadata":{},"sourceType":"module"}