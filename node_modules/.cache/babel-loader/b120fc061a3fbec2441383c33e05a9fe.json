{"ast":null,"code":"var _jsxFileName = \"/home/luan/Documentos/githubproject/src/Components/Charts/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport buildChart from '../../utils/buildChart';\nimport langColors from '../../utils/langColors';\nimport ChartsStyles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Charts = ({\n  langData,\n  repoData\n}) => {\n  _s();\n\n  console.log(3, repoData);\n  console.log(500, langData); //   Gr치fico dos Linguagens Utilizadas  //\n\n  const [langChartData, setLangChartData] = useState(null);\n\n  const initLangChart = () => {\n    const ctx = document.getElementById(\"langChart\");\n    const labels = langData.map(lang => lang.label);\n    const data = langData.map(lang => lang.value);\n    setLangChartData(data);\n\n    if (data.length > 1) {\n      const backgroundColor = langData.map(({\n        color\n      }) => `#${color.length > 4 ? color.slice(1) : color.slice(1)}`);\n      const borderColor = langData.map(lang => `${lang.color}`);\n      console.log(11, borderColor);\n      const chartType = 'pie';\n      const axes = false;\n      const legend = true;\n      const config = {\n        ctx,\n        chartType,\n        labels,\n        data,\n        backgroundColor,\n        borderColor,\n        axes,\n        legend\n      };\n      buildChart(config);\n    }\n  }; //   Gr치fico dos Reposit칩rios mais curtidos  //\n\n\n  const [starChartData, setStarChartData] = useState(null);\n\n  const initmostStarred = () => {\n    const ctx = document.getElementById(\"starChart\");\n    const LIMIT = 5;\n    const sortProperty = 'stargazers_count';\n    const mostStarredRepos = repoData.filter(repo => !repo.fork).sort((a, b) => b[sortProperty] - a[sortProperty]).slice(0, LIMIT);\n    console.log(100, mostStarredRepos);\n    const labels = mostStarredRepos.map(repo => repo.name);\n    const data = mostStarredRepos.map(repo => repo[sortProperty]);\n    console.log(200, data);\n    setLangChartData(data);\n\n    if (data.length > 1) {\n      const backgroundColor = langData.map(({\n        color\n      }) => `#${color.length > 4 ? color.slice(1) : color.slice(1).repeat(2)}B3`);\n      const borderColor = langData.map(lang => `${lang.color}`);\n      const chartType = 'bar';\n      const axes = true;\n      const legend = false;\n      const config = {\n        ctx,\n        chartType,\n        labels,\n        data,\n        backgroundColor,\n        borderColor,\n        axes,\n        legend\n      };\n      buildChart(config);\n    }\n  };\n\n  const [LangStarred, setLangStarred] = useState(null); //   Linguagens mais curtidas nos reposit칩rios  //\n\n  const initLangStarred = () => {\n    const ctx = document.getElementById(\"langStarChart\");\n    const LIMIT = 5;\n    const sortProperty = 'stargazers_count';\n    const filteredRepos = repoData.filter(repo => !repo.fork && repo.stargazers_count > 0);\n    const uniqueLangs = new Set(filteredRepos.map(repo => repo.language));\n    const labels = Array.from(uniqueLangs.values()).filter(l => l);\n    const data = labels.map(lang => {\n      const repos = filteredRepos.filter(repo => repo.language === lang);\n      const starsArr = repos.map(r => r.stargazers_count);\n      const starSum = starsArr.reduce((a, b) => a + b, 0);\n      return starSum;\n    });\n    setLangStarred(data);\n\n    if (data.length > 1) {\n      const chartType = 'doughnut';\n      const axes = false;\n      const legend = true;\n      const borderColor = labels.map(label => langColors.label);\n      const backgroundColor = borderColor.map(color => `${color}B3`);\n      const config = {\n        ctx,\n        chartType,\n        labels,\n        data,\n        backgroundColor,\n        borderColor,\n        axes,\n        legend\n      };\n      console.log(config);\n      buildChart(config);\n    }\n  };\n\n  useEffect(() => {\n    if (langData && repoData) {\n      initLangChart();\n      initmostStarred();\n    }\n  }, []);\n  const chartSize = 300;\n  const langChartError = !(langChartData && langChartData.length > 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: langData != null && repoData && /*#__PURE__*/_jsxDEV(ChartsStyles, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Top Languages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [langChartError && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Nothing to see here!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"langChart\",\n            width: chartSize,\n            height: chartSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Repositories More Starred\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [langChartError && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Nothing to see here!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"starChart\",\n            width: chartSize,\n            height: chartSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Starred By Languages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [langChartError && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Nothing to see here!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"langStarChart\",\n            width: chartSize,\n            height: chartSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Charts, \"UKfcJUSlxbNwhcKUC0YoRTDLuog=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["/home/luan/Documentos/githubproject/src/Components/Charts/index.tsx"],"names":["React","useState","useEffect","buildChart","langColors","ChartsStyles","Charts","langData","repoData","console","log","langChartData","setLangChartData","initLangChart","ctx","document","getElementById","labels","map","lang","label","data","value","length","backgroundColor","color","slice","borderColor","chartType","axes","legend","config","starChartData","setStarChartData","initmostStarred","LIMIT","sortProperty","mostStarredRepos","filter","repo","fork","sort","a","b","name","repeat","LangStarred","setLangStarred","initLangStarred","filteredRepos","stargazers_count","uniqueLangs","Set","language","Array","from","values","l","repos","starsArr","r","starSum","reduce","chartSize","langChartError"],"mappings":"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","sourcesContent":["import React, {useRef,useState,useEffect} from 'react';\nimport buildChart from '../../utils/buildChart';\nimport langColors from '../../utils/langColors';\nimport Chart, { ChartLegendOptions } from 'chart.js';\nimport ChartsStyles from './styles';\nimport { isNullishCoalesce } from 'typescript';\nimport { Canvas} from '../Canvas';\n\n\n\nconst Charts = ({langData,repoData}:any)=> {\n    console.log(3,repoData);\n    console.log(500,langData)\n    \n\n    //   Gr치fico dos Linguagens Utilizadas  //\n\n    const [langChartData,setLangChartData] = useState(null);\n    \n    const initLangChart = () => {\n        const ctx = document.getElementById (\"langChart\");\n        const labels = langData.map((lang:any)=> lang.label);\n        const data = langData.map((lang:any) => lang.value);\n        \n        \n        setLangChartData(data);\n\n        if ( data.length>1) {\n            const backgroundColor = langData.map(({color}:any) => `#${ color.length > 4? color.slice(1):color.slice(1)}`,\n            )                 \n                                                                                            \n    \n            const borderColor = langData.map((lang:any) => `${lang.color}`);\n            console.log(11,borderColor)\n            const chartType = 'pie';\n            const axes = false;\n            const legend = true;\n            const config = {ctx,chartType,labels,data,backgroundColor,borderColor,axes,legend};\n            \n            buildChart(config)\n            \n        }\n    }\n\n//   Gr치fico dos Reposit칩rios mais curtidos  //\n    const [starChartData,setStarChartData] = useState(null);\n\n\n                  \n    const initmostStarred = () => {\n        const ctx = document.getElementById (\"starChart\");\n        const LIMIT = 5;\n        const sortProperty = 'stargazers_count';\n        const mostStarredRepos = repoData.filter((repo: { fork: any; })=>!repo.fork).sort((a: { [x: string]: number; },b: { [x: string]: number; })=> b[sortProperty] - a[sortProperty]).slice(0,LIMIT);\n        console.log(100,mostStarredRepos)\n        const labels = mostStarredRepos.map((repo:any)=> repo.name);\n        const data = mostStarredRepos.map((repo:any) => repo[sortProperty]);        \n        console.log(200,data)                                                \n       \n        \n        setLangChartData(data);\n\n        if ( data.length>1) {\n            const backgroundColor = langData.map(({color}:any) => `#${ color.length > 4? color.slice(1):color.slice(1).repeat(2)}B3`,\n            )                 \n                                                                                            \n    \n            const borderColor = langData.map((lang:any) => `${lang.color}`);\n            const chartType = 'bar';\n            const axes = true;\n            const legend = false;\n            const config = {ctx,chartType,labels,data,backgroundColor,borderColor,axes,legend};\n            buildChart(config);\n          \n            \n        }\n        \n    }\n\n    const [LangStarred,setLangStarred] = useState(null)\n\n                   //   Linguagens mais curtidas nos reposit칩rios  //\n    const initLangStarred = () => {\n        const ctx = document.getElementById (\"langStarChart\");\n        const LIMIT = 5;\n        const sortProperty = 'stargazers_count';\n        const filteredRepos = repoData.filter((repo: { fork: any; stargazers_count: number; }) => !repo.fork && repo.stargazers_count>0 )\n        const uniqueLangs = new Set (filteredRepos.map((repo: { language: any; })=>repo.language))\n        const labels = Array.from(uniqueLangs.values()).filter(l => l);\n        const data = labels.map(lang => {\n          const repos = filteredRepos.filter((repo: { language: unknown; }) => repo.language === lang);\n          const starsArr = repos.map((r: { stargazers_count: any; }) => r.stargazers_count);\n          const starSum = starsArr.reduce((a: any, b: any) => a + b, 0);\n          return starSum;  \n                                                  \n        });\n        \n        setLangStarred(data);\n\n        if ( data.length>1) {\n            const chartType = 'doughnut';\n      const axes = false;\n      const legend = true;\n      const borderColor= (labels).map((label) => langColors.label);\n      const backgroundColor = borderColor.map(color => `${color}B3`);\n      const config = { ctx, chartType, labels, data, backgroundColor, borderColor, axes, legend };\n      console.log(config)\n      buildChart(config);\n          \n            \n        }\n        \n    }\n\n    useEffect(() => {\n        \n        if (langData && repoData) {     \n          initLangChart();\n          initmostStarred();\n   \n       \n        }\n      }, []);\n    \n      \n    const chartSize = 300;\n    const langChartError = !(langChartData && langChartData.length > 0);\n \n    return (\n        \n        \n        <div>\n            {langData!=null && repoData && (\n            <ChartsStyles>\n                \n                <div className = \"chart\">\n                    <header>\n                        <h2>Top Languages</h2>\n                    </header>\n                    <div className=\"chart-container\">\n                    {langChartError && <p>Nothing to see here!</p>}\n                    <canvas  id=\"langChart\" width={chartSize} height={chartSize}/>            \n          </div>\n        </div>\n                \n\n        <div className = \"chart\">\n                    <header>\n                        <h2>Repositories More Starred</h2>\n                    </header>\n                    <div className=\"chart-container\">\n                    {langChartError && <p>Nothing to see here!</p>}\n                    <canvas  id=\"starChart\" width={chartSize} height={chartSize}/>            \n          </div>\n        </div>\n\n        <div className = \"chart\">\n                    <header>\n                        <h2>Starred By Languages</h2>\n                    </header>\n                    <div className=\"chart-container\">\n                    {langChartError && <p>Nothing to see here!</p>}\n                    <canvas  id=\"langStarChart\" width={chartSize} height={chartSize}/>            \n          </div>\n        </div>\n\n\n            </ChartsStyles>\n       \n        )\n        }\n         </div>\n    )\n\n\n    }\nexport default Charts;"]},"metadata":{},"sourceType":"module"}