{"ast":null,"code":"import React, { useState, useCallback, useEffect } from 'react';\nimport Calendar, { Skeleton } from 'react-activity-calendar';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nasync function fetchCalendarData(username, year) {\n  return (await fetch(`${API_URL}${username}?y=${year}`)).json();\n}\n\nconst GitHubCalendar = ({\n  username,\n  year = 'last',\n  theme = DEFAULT_THEME,\n  ...calendarProps\n}) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchData = useCallback(() => {\n    setLoading(true);\n    setError(null);\n    fetchCalendarData(username, year).then(({\n      contributions\n    }) => setData(contributions)).catch(setError).finally(() => setLoading(false));\n  }, [username, year]);\n  useEffect(fetchData, []); // on mount\n\n  useEffect(fetchData, [username, year]);\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"p\", null, \"Error :(\");\n  }\n\n  if (loading || !data) {\n    return /*#__PURE__*/React.createElement(Skeleton, {\n      loading: true\n    });\n  }\n\n  const labels = {\n    totalCount: `{{count}} contributions in ${year === 'last' ? 'the last year' : '{{year}}'}`\n  };\n  return /*#__PURE__*/React.createElement(Calendar, _extends({\n    data: data,\n    theme: theme,\n    labels: labels\n  }, calendarProps));\n}; // GitHub theme\n\n\nconst DEFAULT_THEME = {\n  level4: '#216e39',\n  level3: '#30a14e',\n  level2: '#40c463',\n  level1: '#9be9a8',\n  level0: '#ebedf0'\n};\nconst API_URL = 'https://github-contributions-api.jogruber.de/v4/';\nexport { GitHubCalendar as default };","map":{"version":3,"sources":["../src/index.tsx"],"names":["fetch","API_URL","username","year","GitHubCalendar","theme","calendarProps","useState","fetchData","useCallback","setLoading","setError","fetchCalendarData","contributions","setData","useEffect","loading","labels","totalCount","DEFAULT_THEME","level4","level3","level2","level1","level0"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAeA,eAAA,iBAAA,CAAA,QAAA,EAAA,IAAA,EAAqF;AACnF,SAAO,CAAC,MAAMA,KAAK,CAAE,GAAEC,OAAQ,GAAEC,QAAS,MAAKC,IAAxC,EAAY,CAAZ,EAAP,IAAO,EAAP;AACD;;MAEKC,cAAwC,GAAG,CAAC;AAAA,EAAA,QAAA;AAEhDD,EAAAA,IAAI,GAF4C,MAAA;AAGhDE,EAAAA,KAAK,GAH2C,aAAA;AAIhD,KAAGC;AAJ6C,CAAD,KAK3C;AACJ,QAAM,CAAA,IAAA,EAAA,OAAA,IAAkBC,QAAQ,CAAhC,IAAgC,CAAhC;AACA,QAAM,CAAA,OAAA,EAAA,UAAA,IAAwBA,QAAQ,CAAtC,KAAsC,CAAtC;AACA,QAAM,CAAA,KAAA,EAAA,QAAA,IAAoBA,QAAQ,CAAlC,IAAkC,CAAlC;AAEA,QAAMC,SAAS,GAAGC,WAAW,CAAC,MAAM;AAClCC,IAAAA,UAAU,CAAVA,IAAU,CAAVA;AACAC,IAAAA,QAAQ,CAARA,IAAQ,CAARA;AACAC,IAAAA,iBAAiB,CAAA,QAAA,EAAjBA,IAAiB,CAAjBA,CAAAA,IAAAA,CACQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAuBC,OAAO,CADtCF,aACsC,CADtCA,EAAAA,KAAAA,CAAAA,QAAAA,EAAAA,OAAAA,CAGW,MAAMF,UAAU,CAH3BE,KAG2B,CAH3BA;AAH2B,GAAA,EAO1B,CAAA,QAAA,EAPH,IAOG,CAP0B,CAA7B;AASAG,EAAAA,SAAS,CAAA,SAAA,EAdL,EAcK,CAATA,CAdI,CAAA;;AAeJA,EAAAA,SAAS,CAAA,SAAA,EAAY,CAAA,QAAA,EAArBA,IAAqB,CAAZ,CAATA;;AAEA,MAAA,KAAA,EAAW;AACT,WAAA,aAAO,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,IAAA,EAAP,UAAO,CAAP;AACD;;AAED,MAAIC,OAAO,IAAI,CAAf,IAAA,EAAsB;AACpB,WAAA,aAAO,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAkB,MAAA,OAAO,EAAA;AAAzB,KAAA,CAAP;AACD;;AAED,QAAMC,MAAM,GAAG;AACbC,IAAAA,UAAU,EAAG,8BAA6Bf,IAAI,KAAJA,MAAAA,GAAAA,eAAAA,GAAoC,UAAW;AAD5E,GAAf;AAIA,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA;AAAU,IAAA,IAAI,EAAd,IAAA;AAAsB,IAAA,KAAK,EAA3B,KAAA;AAAoC,IAAA,MAAM,EAAEc;AAA5C,GAAA,EAAP,aAAO,CAAA,CAAP;AACD,C,EAAA;;;AAGD,MAAME,aAAoB,GAAG;AAC3BC,EAAAA,MAAM,EADqB,SAAA;AAE3BC,EAAAA,MAAM,EAFqB,SAAA;AAG3BC,EAAAA,MAAM,EAHqB,SAAA;AAI3BC,EAAAA,MAAM,EAJqB,SAAA;AAK3BC,EAAAA,MAAM,EAAE;AALmB,CAA7B;AAQA,MAAMvB,OAAO,GAAb,kDAAA","sourcesContent":["import React, { useState, useEffect, useCallback, FunctionComponent } from 'react';\nimport Calendar, {\n  Skeleton as CalendarSkeleton,\n  Props as CalendarProps,\n  CalendarData,\n  Theme,\n} from 'react-activity-calendar';\n\nimport { Year, ApiResponse } from './types';\n\ninterface Props extends Omit<CalendarProps, 'data'> {\n  username: string;\n  year?: Year;\n}\n\nasync function fetchCalendarData(username: string, year: Year): Promise<ApiResponse> {\n  return (await fetch(`${API_URL}${username}?y=${year}`)).json();\n}\n\nconst GitHubCalendar: FunctionComponent<Props> = ({\n  username,\n  year = 'last',\n  theme = DEFAULT_THEME,\n  ...calendarProps\n}) => {\n  const [data, setData] = useState<CalendarData | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchData = useCallback(() => {\n    setLoading(true);\n    setError(null);\n    fetchCalendarData(username, year)\n      .then(({ contributions }) => setData(contributions))\n      .catch(setError)\n      .finally(() => setLoading(false));\n  }, [username, year]);\n\n  useEffect(fetchData, []); // on mount\n  useEffect(fetchData, [username, year]);\n\n  if (error) {\n    return <p>Error :(</p>;\n  }\n\n  if (loading || !data) {\n    return <CalendarSkeleton loading />;\n  }\n\n  const labels = {\n    totalCount: `{{count}} contributions in ${year === 'last' ? 'the last year' : '{{year}}'}`,\n  };\n\n  return <Calendar data={data} theme={theme} labels={labels} {...calendarProps} />;\n};\n\n// GitHub theme\nconst DEFAULT_THEME: Theme = {\n  level4: '#216e39',\n  level3: '#30a14e',\n  level2: '#40c463',\n  level1: '#9be9a8',\n  level0: '#ebedf0',\n};\n\nconst API_URL = 'https://github-contributions-api.jogruber.de/v4/';\n\nexport default GitHubCalendar;\n"]},"metadata":{},"sourceType":"module"}