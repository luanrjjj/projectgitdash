{"ast":null,"code":"var _jsxFileName = \"/home/luan/Documentos/githubproject/src/Components/Repos/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ReposStyles, Section } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Repos = ({\n  repoData\n}) => {\n  _s();\n\n  const [topRepos, setTopRepos] = useState([]);\n  const [sortType, setSortType] = useState('stars');\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const map = {\n    stars: 'stargazers_count',\n    forks: 'forks_count',\n    size: 'size'\n  };\n  const sortTypes = ['stargazers_count', 'forks_count', 'size'];\n\n  const getTopRepos = typed => {\n    const LIMIT = 8;\n    const sorted = repoData.filter(repo => !repo.fork).sort((a, b) => b[typed] - a[typed]).slice(0, LIMIT);\n    setTopRepos(sorted);\n  };\n\n  useEffect(() => {\n    if (repoData) {\n      getTopRepos(repoData);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Section, {\n    children: /*#__PURE__*/_jsxDEV(ReposStyles, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Top Repos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"lab\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Repos, \"hMoiE347XscnHKCcpdoeHWHe++M=\");\n\n_c = Repos;\nexport default Repos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Repos\");","map":{"version":3,"sources":["/home/luan/Documentos/githubproject/src/Components/Repos/index.tsx"],"names":["React","useState","useEffect","ReposStyles","Section","Repos","repoData","topRepos","setTopRepos","sortType","setSortType","dropdownOpen","setDropdownOpen","map","stars","forks","size","sortTypes","getTopRepos","typed","LIMIT","sorted","filter","repo","fork","sort","a","b","slice"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAAwBC,WAAxB,EAAqCC,OAArC,QAAmD,UAAnD;;;AAKA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAmB;AAAA;;AAC7B,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAyBP,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACQ,QAAD,EAAUC,WAAV,IAAyBT,QAAQ,CAAC,OAAD,CAAvC;AACA,QAAM,CAACU,YAAD,EAAcC,eAAd,IAAiCX,QAAQ,CAAC,KAAD,CAA/C;AAEA,QAAMY,GAAG,GAAG;AACRC,IAAAA,KAAK,EAAC,kBADE;AAERC,IAAAA,KAAK,EAAE,aAFC;AAGRC,IAAAA,IAAI,EAAC;AAHG,GAAZ;AAOA,QAAMC,SAAS,GAAG,CAAC,kBAAD,EAAoB,aAApB,EAAkC,MAAlC,CAAlB;;AAKJ,QAAMC,WAAW,GAAIC,KAAD,IAAkB;AAClC,UAAMC,KAAK,GAAG,CAAd;AACC,UAAMC,MAAM,GAAGf,QAAQ,CAACgB,MAAT,CAAiBC,IAAD,IAC/B,CAACA,IAAI,CAACC,IADS,EACHC,IADG,CACE,CAACC,CAAD,EAA6BC,CAA7B,KACeA,CAAC,CAACR,KAAD,CAAD,GAAWO,CAAC,CAACP,KAAD,CAF7B,EAEsCS,KAFtC,CAE4C,CAF5C,EAE8CR,KAF9C,CAAf;AAGCZ,IAAAA,WAAW,CAACa,MAAD,CAAX;AAEL,GAPD;;AAQAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,QAAJ,EAAc;AACZY,MAAAA,WAAW,CAACZ,QAAD,CAAX;AACD;AACF,GAJM,EAIJ,EAJI,CAAT;AAOE,sBACI,QAAC,OAAD;AAAA,2BACM,QAAC,WAAD;AAAA,8BACA;AAAA,+BACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,cADA,eAIF;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJE;AAAA;AAAA;AAAA;AAAA;AAAA;AADN;AAAA;AAAA;AAAA;AAAA,UADJ;AAaD,CA7CD;;GAAMD,K;;KAAAA,K;AA+CN,eAAeA,KAAf","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport {DropdownStyles, ReposStyles, Section} from './styles';\n\n\n\n\nconst Repos = ({repoData}:any)=> {\n    const [topRepos,setTopRepos] = useState([]);\n    const [sortType,setSortType] = useState('stars');\n    const [dropdownOpen,setDropdownOpen] = useState(false)\n\n    const map = {\n        stars:'stargazers_count',\n        forks :'forks_count',\n        size:'size',\n    };\n\n\n    const sortTypes = ['stargazers_count','forks_count','size']\n\n\ntype typed = \"stars\"|\"forks\"|\"size\"\n\nconst getTopRepos = (typed:string) => {\n    const LIMIT = 8;\n     const sorted = repoData.filter((repo: { fork: any; }) => \n     !repo.fork).sort((a: { [x: string]: number; },b: \n        { [x: string]: number; }) => b[typed] - a[typed]).slice(0,LIMIT);\n      setTopRepos(sorted)\n      \n}\nuseEffect(() => {\n    if (repoData) {\n      getTopRepos(repoData);\n    }\n  }, []);\n\n\n  return (\n      <Section>\n            <ReposStyles>\n            <header>\n          <h2>Top Repos</h2>  \n          </header>\n          <div>\n            <span>lab</span>\n          </div>\n\n          </ReposStyles>\n      </Section>\n  )\n}\n\nexport default Repos;"]},"metadata":{},"sourceType":"module"}