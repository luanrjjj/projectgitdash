{"ast":null,"code":"var _jsxFileName = \"/home/luan/Documentos/githubproject/src/Components/Repos/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { DropdownStyles, ReposStyles, Section } from './styles';\nimport { RiGitRepositoryLine } from 'react-icons/ri';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Repos = ({\n  repoData\n}) => {\n  _s();\n\n  const [topRepos, setTopRepos] = useState([]);\n  const [sortType, setSortType] = useState('stars');\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const map = {\n    stars: 'stargazers_count',\n    forks: 'forks_count',\n    size: 'size'\n  };\n  const sortTypes = ['stargazers_count', 'forks_count', 'size'];\n\n  const getTopRepos = typed => {\n    const LIMIT = 8;\n    const sorted = repoData.filter(repo => !repo.fork).sort((a, b) => b[typed] - a[typed]).slice(0, LIMIT);\n    console.log(555555555555, sorted);\n    setTopRepos(sorted);\n  };\n\n  useEffect(() => {\n    if (repoData) {\n      getTopRepos(sortType);\n    }\n  }, [repoData, sortType]);\n\n  const toggleDropdown = () => setDropdownOpen(!dropdownOpen);\n\n  const changeRepoSort = sortType => {\n    setSortType(sortType);\n    toggleDropdown();\n  };\n\n  console.log(100000, topRepos);\n  return /*#__PURE__*/_jsxDEV(Section, {\n    children: repoData && /*#__PURE__*/_jsxDEV(ReposStyles, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Top Repos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"by\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DropdownStyles, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown_list\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn-sorted\",\n                children: sortType\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dropdown_list-item\",\n                children: sortTypes.map((type, i) => /*#__PURE__*/_jsxDEV(\"a\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn-list\",\n                    onClick: () => changeRepoSort(type),\n                    children: type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 72,\n                    columnNumber: 27\n                  }, this)\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RepoList\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"RepoCards\",\n          children: topRepos && topRepos.map(repo => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"RepoCard\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cardTitle\",\n              children: [/*#__PURE__*/_jsxDEV(RiGitRepositoryLine, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"RepoName\",\n                children: repo === null || repo === void 0 ? void 0 : repo.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: repo.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this)]\n          }, repo.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Repos, \"hMoiE347XscnHKCcpdoeHWHe++M=\");\n\n_c = Repos;\nexport default Repos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Repos\");","map":{"version":3,"sources":["/home/luan/Documentos/githubproject/src/Components/Repos/index.tsx"],"names":["React","useState","useEffect","DropdownStyles","ReposStyles","Section","RiGitRepositoryLine","Repos","repoData","topRepos","setTopRepos","sortType","setSortType","dropdownOpen","setDropdownOpen","map","stars","forks","size","sortTypes","getTopRepos","typed","LIMIT","sorted","filter","repo","fork","sort","a","b","slice","console","log","toggleDropdown","changeRepoSort","type","i","name","description"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport {DropdownStyles, ReposStyles, Section} from './styles';\n\nimport {RiGitRepositoryLine} from 'react-icons/ri'\n\n\nconst Repos = ({repoData}:any)=> {\n \n    const [topRepos,setTopRepos] = useState([]);\n    const [sortType,setSortType] = useState('stars');\n    const [dropdownOpen,setDropdownOpen] = useState(false)\n\n    const map = {\n        stars:'stargazers_count',\n        forks :'forks_count',\n        size:'size',\n    };\n\n\n    const sortTypes = ['stargazers_count','forks_count','size']\n\n\ntype typed = \"stars\"|\"forks\"|\"size\"\n\nconst getTopRepos = (typed:string) => {\n    const LIMIT = 8;\n     const sorted = repoData.filter((repo: { fork: any; }) => \n     !repo.fork).sort((a: { [x: string]: number; },b: \n        { [x: string]: number; }) => b[typed] - a[typed]).slice(0,LIMIT);\n        console.log(555555555555,sorted)\n\n       \n        \n      setTopRepos(sorted)\n      \n}\nuseEffect(() => {\n    if (repoData) {\n      getTopRepos(sortType);\n    }\n    \n  }, [repoData,sortType]);\n\n  const toggleDropdown = () => setDropdownOpen(!dropdownOpen);\n\n  const changeRepoSort = (sortType:string) => {\n      setSortType(sortType);\n      toggleDropdown();\n  }\n  console.log(100000,topRepos)\n  \n\n \n  return (\n    \n      <Section>\n        {repoData && (\n            <ReposStyles>\n            <header>\n          <h2>Top Repos</h2>  \n        \n          <div className = \"dropdown-wrapper\"> \n            <span>by</span>\n           \n\n          <DropdownStyles >\n            <div className=\"dropdown_list\">\n            <button className=\"btn-sorted\">{sortType}</button> \n            <div className=\"dropdown_list-item\" >\n                  {sortTypes.map((type,i) => \n                      <a key={i}>\n                          <button className =\"btn-list\" onClick = {() => changeRepoSort(type)}>{type}</button>\n                      </a>\n                     \n                  )}\n                   </div>\n              </div>\n              \n              </DropdownStyles>\n              </div>\n              </header>\n         \n\n          <div className=\"RepoList\">\n            <ul className=\"RepoCards\">\n            {topRepos && topRepos.map(repo=>\n          \n            <li className = \"RepoCard\" key={repo.name}>\n                <div className=\"cardTitle\">\n            <RiGitRepositoryLine/>\n              <h1 className=\"RepoName\">{repo?.name}</h1>\n              </div>\n              <p>{repo.description}</p>\n            </li>\n        \n            )}\n              </ul>\n          </div>\n            \n          </ReposStyles>\n\n        )}\n      </Section>\n           \n        \n  )\n                  \n}\n\nexport default Repos;"]},"metadata":{},"sourceType":"module"}