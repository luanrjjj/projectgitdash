import React, { useState, useCallback, useEffect } from 'react';
import Calendar, { Skeleton } from 'react-activity-calendar';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

async function fetchCalendarData(username, year) {
  return (await fetch(`${API_URL}${username}?y=${year}`)).json();
}

const GitHubCalendar = ({
  username,
  year = 'last',
  theme = DEFAULT_THEME,
  ...calendarProps
}) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const fetchData = useCallback(() => {
    setLoading(true);
    setError(null);
    fetchCalendarData(username, year).then(({
      contributions
    }) => setData(contributions)).catch(setError).finally(() => setLoading(false));
  }, [username, year]);
  useEffect(fetchData, []); // on mount

  useEffect(fetchData, [username, year]);

  if (error) {
    return /*#__PURE__*/React.createElement("p", null, "Error :(");
  }

  if (loading || !data) {
    return /*#__PURE__*/React.createElement(Skeleton, {
      loading: true
    });
  }

  const labels = {
    totalCount: `{{count}} contributions in ${year === 'last' ? 'the last year' : '{{year}}'}`
  };
  return /*#__PURE__*/React.createElement(Calendar, _extends({
    data: data,
    theme: theme,
    labels: labels
  }, calendarProps));
}; // GitHub theme


const DEFAULT_THEME = {
  level4: '#216e39',
  level3: '#30a14e',
  level2: '#40c463',
  level1: '#9be9a8',
  level0: '#ebedf0'
};
const API_URL = 'https://github-contributions-api.jogruber.de/v4/';

export { GitHubCalendar as default };
//# sourceMappingURL=index.es.js.map
